#!/usr/bin/env python3
"""
MVP - Aplicaci√≥n Web para Identificaci√≥n de Minerales mediante Espectros EDS
"""

import os
import tempfile
from datetime import datetime

import numpy as np
import pandas as pd
import streamlit as st

from src.analysis.compare import compare_spectrum
from src.database.connection import SessionLocal
from src.database.queries import (count_muestras, create_tables,
                                  get_all_muestras_with_vectors,
                                  insert_espectro, insert_muestra)
from src.parsers.docx_parser import extract_and_vectorize_spectrum


def setup_database():
    """Inicializa la base de datos si es necesario."""
    create_tables()


def show_database_stats():
    """Muestra estad√≠sticas de la base de datos."""
    session = SessionLocal()
    try:
        total_muestras = count_muestras(session)
        muestras_with_vectors = len(get_all_muestras_with_vectors(session))
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Muestras", total_muestras)
        with col2:
            st.metric("Muestras con Espectros", muestras_with_vectors)
            
    finally:
        session.close()


def show_mineral_database():
    """Muestra la tabla de minerales en la base de datos."""
    session = SessionLocal()
    try:
        muestras = get_all_muestras_with_vectors(session)
        
        if not muestras:
            st.warning("No hay muestras en la base de datos. Ejecuta el script de poblaci√≥n primero.")
            return
        
        # Crear DataFrame para mostrar
        data = []
        for muestra in muestras:
            data.append({
                "ID": muestra.id,
                "Mineral": muestra.nombre_muestra,
                "Investigador": muestra.investigador or "N/A",
                "Fecha": muestra.fecha.strftime("%Y-%m-%d") if muestra.fecha else "N/A"
            })
        
        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True)
        
    finally:
        session.close()


def identify_mineral():
    """Interfaz para identificar un mineral subiendo un archivo DOCX."""
    st.subheader("üì§ Subir Espectro EDS para Identificaci√≥n")
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo DOCX con espectro EDS",
        type=['docx'],
        help="El archivo debe contener una imagen de espectro EDS de 400x512 p√≠xeles"
    )
    
    if uploaded_file is not None:
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix='.docx') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_path = tmp_file.name
        
        try:
            with st.spinner("Procesando espectro..."):
                # Extraer y vectorizar
                vector = extract_and_vectorize_spectrum(tmp_path, vector_size=200)
                
                if vector is None:
                    st.error("‚ùå No se encontr√≥ un espectro v√°lido en el archivo. Verifica que contenga una imagen de espectro EDS de 400x512 p√≠xeles.")
                    return
                
                st.success("‚úÖ Espectro extra√≠do exitosamente!")
                
                # Mostrar informaci√≥n del vector
                st.info(f"Vector generado: {len(vector)} dimensiones")
                
                # Guardar en base de datos
                session = SessionLocal()
                try:
                    nueva_muestra = insert_muestra(
                        session=session,
                        nombre_muestra=f"Muestra desconocida - {datetime.now().strftime('%Y%m%d_%H%M%S')}",
                        investigador="Usuario Web",
                        ruta_imagen=uploaded_file.name
                    )
                    
                    insert_espectro(session, muestra_id=nueva_muestra.id, vector=vector)
                    
                    # Comparar contra la base de datos
                    st.subheader("üîç Resultados de Identificaci√≥n")
                    
                    resultados = compare_spectrum(session, nueva_muestra.id, similitud_umbral=0.0)
                    
                    if not resultados:
                        st.warning("No se encontraron minerales similares en la base de datos.")
                    else:
                        st.write("Minerales m√°s similares (ordenados por similitud):")
                        
                        # Crear DataFrame con resultados
                        df_resultados = pd.DataFrame([
                            {
                                "Mineral": nombre,
                                "Similitud": f"{sim:.2%}",
                                "Confianza": "Alta" if sim > 0.8 else "Media" if sim > 0.6 else "Baja"
                            }
                            for mid, nombre, sim in resultados[:10]  # Top 10
                        ])
                        
                        st.dataframe(df_resultados, use_container_width=True)
                        
                        # Mostrar el mejor match
                        if resultados:
                            mejor_match = resultados[0]
                            similitud = mejor_match[2]
                            mineral = mejor_match[1]
                            
                            if similitud > 0.8:
                                st.success(f"üéØ **Identificaci√≥n muy probable:** {mineral} (similitud: {similitud:.2%})")
                            elif similitud > 0.6:
                                st.warning(f"ü§î **Posible identificaci√≥n:** {mineral} (similitud: {similitud:.2%})")
                            else:
                                st.info(f"üí° **Sugerencia:** {mineral} (similitud: {similitud:.2%}) - Se recomienda an√°lisis adicional")
                
                finally:
                    session.close()
                    
        finally:
            # Limpiar archivo temporal
            os.unlink(tmp_path)


def main():
    st.set_page_config(
        page_title="Identificaci√≥n de Minerales EDS",
        page_icon="üî¨",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üî¨ Sistema de Identificaci√≥n de Minerales mediante Espectros EDS")
    st.markdown("---")
    
    # Inicializar base de datos
    setup_database()
    
    # Sidebar con navegaci√≥n
    st.sidebar.title("üìã Navegaci√≥n")
    page = st.sidebar.selectbox(
        "Selecciona una opci√≥n:",
        ["üè† Inicio", "üîç Identificar Mineral", "üìä Base de Datos", "‚ÑπÔ∏è Informaci√≥n"]
    )
    
    if page == "üè† Inicio":
        st.header("Bienvenido al Sistema de Identificaci√≥n de Minerales")
        
        st.markdown("""
        Este sistema utiliza **espectros EDS** (Energy Dispersive Spectroscopy) para identificar minerales 
        mediante comparaci√≥n con una base de datos de muestras conocidas.
        
        ### üöÄ Caracter√≠sticas:
        - **Procesamiento autom√°tico** de archivos DOCX con espectros EDS
        - **Vectorizaci√≥n** de espectros para comparaci√≥n matem√°tica
        - **Identificaci√≥n** mediante similitud de coseno
        - **Base de datos** de minerales de referencia
        
        ### üìà Estad√≠sticas de la Base de Datos:
        """)
        
        show_database_stats()
        
        st.markdown("""
        ### üîß C√≥mo usar:
        1. Ve a "üîç Identificar Mineral"
        2. Sube un archivo DOCX con tu espectro EDS
        3. El sistema procesar√° autom√°ticamente el espectro
        4. Obtendr√°s una lista de minerales similares ordenados por probabilidad
        """)
    
    elif page == "üîç Identificar Mineral":
        identify_mineral()
    
    elif page == "üìä Base de Datos":
        st.header("üìä Base de Datos de Minerales")
        
        show_database_stats()
        st.markdown("---")
        
        st.subheader("üóÇÔ∏è Minerales en la Base de Datos")
        show_mineral_database()
    
    elif page == "‚ÑπÔ∏è Informaci√≥n":
        st.header("‚ÑπÔ∏è Informaci√≥n T√©cnica")
        
        st.markdown("""
        ### üî¨ Tecnolog√≠a
        - **Python**: Lenguaje de programaci√≥n principal
        - **OpenCV**: Procesamiento de im√°genes de espectros
        - **SQLite**: Base de datos para almacenar vectores
        - **Streamlit**: Interfaz web interactiva
        - **NumPy**: C√°lculos matem√°ticos y vectorizaci√≥n
        
        ### üìã Algoritmo de Identificaci√≥n
        1. **Extracci√≥n**: Se extrae la imagen del espectro EDS del archivo DOCX
        2. **Preprocesamiento**: Se convierte a escala de grises y se aplica filtro Gaussiano
        3. **Segmentaci√≥n**: Se crea una m√°scara binaria para separar el espectro del fondo
        4. **Vectorizaci√≥n**: Se calcula el perfil del espectro y se redimensiona a 200 dimensiones
        5. **Normalizaci√≥n**: Se normaliza el vector para comparaci√≥n
        6. **Comparaci√≥n**: Se calcula la similitud de coseno contra todas las muestras
        
        ### üìä M√©tricas de Similitud
        - **> 80%**: Identificaci√≥n muy probable
        - **60-80%**: Posible identificaci√≥n
        - **< 60%**: Requiere an√°lisis adicional
        
        ### üë®‚Äçüíª Desarrollado para Tesis de Identificaci√≥n de Minerales
        """)


if __name__ == "__main__":
    main() 