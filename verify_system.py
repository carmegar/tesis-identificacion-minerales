#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema de identificaci√≥n de minerales.
Verifica que todos los componentes est√©n funcionando correctamente.
"""

import os
import sys
from pathlib import Path


def check_dependencies():
    """Verifica que todas las dependencias est√©n instaladas."""
    print("üîç Verificando dependencias...")
    
    required_modules = [
        'numpy', 'cv2', 'sqlalchemy', 'docx', 'streamlit', 'pandas'
    ]
    
    missing = []
    for module in required_modules:
        try:
            if module == 'cv2':
                import cv2
            elif module == 'docx':
                import docx
            else:
                __import__(module)
            print(f"  ‚úÖ {module}")
        except ImportError:
            missing.append(module)
            print(f"  ‚ùå {module}")
    
    if missing:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {', '.join(missing)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True


def check_project_structure():
    """Verifica la estructura del proyecto."""
    print("\nüìÅ Verificando estructura del proyecto...")
    
    required_files = [
        'app.py',
        'populate_database.py',
        'requirements.txt',
        'README.md',
        'src/main.py',
        'src/analysis/vectorize.py',
        'src/analysis/compare.py',
        'src/database/models.py',
        'src/database/connection.py',
        'src/database/queries.py',
        'src/parsers/docx_parser.py',
        'tests/test_vectorize_pipeline.py',
        'docs/architecture.md'
    ]
    
    missing = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            missing.append(file_path)
            print(f"  ‚ùå {file_path}")
    
    if missing:
        print(f"\n‚ö†Ô∏è  Archivos faltantes: {', '.join(missing)}")
        return False
    
    print("‚úÖ Estructura del proyecto correcta")
    return True


def check_database():
    """Verifica la base de datos."""
    print("\nüóÑÔ∏è Verificando base de datos...")
    
    try:
        from src.database.connection import SessionLocal
        from src.database.queries import count_muestras
        
        session = SessionLocal()
        count = count_muestras(session)
        session.close()
        
        print(f"  ‚úÖ Base de datos accesible")
        print(f"  üìä Muestras en la base de datos: {count}")
        
        if count == 0:
            print("  ‚ö†Ô∏è  Base de datos vac√≠a. Ejecuta 'python populate_database.py'")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en base de datos: {e}")
        return False


def check_sample_processing():
    """Verifica que el procesamiento de muestras funcione."""
    print("\nüî¨ Verificando procesamiento de muestras...")
    
    try:
        from src.parsers.docx_parser import extract_and_vectorize_spectrum

        # Buscar archivo de prueba
        test_files = [
            "data/Eds_magnetita.docx",
            "data/Eds_magnetita-2.docx", 
            "data/Eds_magnetita-3.docx"
        ]
        
        test_file = None
        for file_path in test_files:
            if os.path.exists(file_path):
                test_file = file_path
                break
        
        if not test_file:
            print("  ‚ö†Ô∏è  No se encontraron archivos de prueba en data/")
            return True
        
        print(f"  üß™ Probando con: {test_file}")
        vector = extract_and_vectorize_spectrum(test_file, vector_size=200)
        
        if vector is not None and len(vector) == 200:
            print("  ‚úÖ Procesamiento de espectros funcionando")
            return True
        else:
            print("  ‚ùå Error en procesamiento de espectros")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Error en procesamiento: {e}")
        return False


def check_cleaned_files():
    """Verifica que los archivos innecesarios hayan sido eliminados."""
    print("\nüßπ Verificando limpieza de archivos...")
    
    unwanted_patterns = [
        '__pycache__',
        '.pytest_cache',
        'data/images/debug_',
        'data/images/mask_',
        'data/temp_images'
    ]
    
    found_unwanted = []
    for pattern in unwanted_patterns:
        if '*' in pattern or os.path.exists(pattern):
            found_unwanted.append(pattern)
    
    if found_unwanted:
        print(f"  ‚ö†Ô∏è  Archivos temporales encontrados: {', '.join(found_unwanted)}")
    else:
        print("  ‚úÖ Archivos temporales limpiados")
    
    return True


def main():
    """Funci√≥n principal de verificaci√≥n."""
    print("üî¨ Verificaci√≥n del Sistema de Identificaci√≥n de Minerales EDS")
    print("=" * 60)
    
    checks = [
        check_dependencies,
        check_project_structure,
        check_database,
        check_sample_processing,
        check_cleaned_files
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"  ‚ùå Error en verificaci√≥n: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    
    if all(results):
        print("üéâ ¬°Sistema verificado exitosamente!")
        print("\nüöÄ Para usar el sistema:")
        print("   streamlit run app.py")
    else:
        print("‚ö†Ô∏è  Se encontraron algunos problemas.")
        print("Revisa los mensajes anteriores para solucionarlos.")
    
    print("\nüìã Comandos √∫tiles:")
    print("   python populate_database.py  # Poblar base de datos")
    print("   python src/main.py          # Prueba individual")
    print("   python tests/test_vectorize_pipeline.py  # Test del sistema")


if __name__ == "__main__":
    main() 